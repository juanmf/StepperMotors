@startuml
'https://plantuml.com/class-diagram

package multiprocess {
class Event
class Process
class Manager
class Value
class Queue
class Lock
}

package MainProcess {
class EventDispatcher as "EventDispatcher" <<Singleton>> {
- _mpEventSharedMemory // Read only on MainProcess
--
+ publishMainLoop()
+ register(eventName, callee)
- _waitChildProcessEvent()
}
class BlockingQueueWorkerEd as "BlockingQueueWorker" <<Instance>> {
+ work() // caller thread, puts in jobQueue
- _doConsumeJob(_waitChildProcessEvent: Callable) // pops jobQueue
}
abstract class MotorDriver1 as "MotorDriver" {
--
## stepping method arguments, [optional]
## (steps, [fn, eventNamePrefix, eventInAdvanceSteps])
signedSteps()
stepClockWise()
stepCounterClockWise()
- _operateStepper(PolarCoordinatesSample.sharedDataProcessing)
}
class MotorDriver_Elevation_proxy << Instance>> {
jobQueue // Shared multiprocess blocking queue
--
+ work([steps, PolarCoordinatesSample.sharedDataProcessing])
- <s>_operateStepper(PolarCoordinatesSample.sharedDataProcessing)</s>
}
class MotorDriver_Azimuth_proxy  <<Instance>> {
jobQueue // Shared multiprocess blocking queue
--
+ work([steps, PolarCoordinatesSample.sharedDataProcessing])
- <s>_operateStepper(PolarCoordinatesSample.sharedDataProcessing)</s>
}
MotorDriver_Elevation_proxy ..> MotorDriver
MotorDriver_Azimuth_proxy ..> MotorDriver

class PolarCoordinatesSample <<User/Client code>> {
        self.fireReadyEventsAwaited = ["azimuthAimingCompletesteppingCompleteAdvance",...]
        self.elevationDriver  // MainProcess driver proxy
        self.azimuthDriver  // MainProcess driver proxy
        self.azimuthDriverEvent = Event()
        self.elevationDriverEvent = Event()
        self.azimuthEventsObserverWorker = None
        self.elevationEventsObserverWorker = None
--
## waits on shared `multiprocess.Event` set by \n## sharedDataProcessing in P2
+ChildProcessEventObserver()
+fireReadyEventHandler()
-initDrivers()
-operateDrivers()
+ {static} sharedDataProcessing(currentPosition, targetPosition, direction, sharedMemory)
}
class MultiProcessingControllerFactory <<Fluid interface>>{
setUpProcess()
withDriver(clientSharedMemory, factoryFnReference, stepperMotor, directionPin, stepPin, sleepGpioPin)
spawn() // spawns child process (P2), initiate drivers in P2 and driver proxies in MainProcess.
}
}
package Process2 as "Process-2" {
class MpQueue {
--
// queues.Queue adapter
task_done()
}
class PolarCoordinatesSample2 as "PolarCoordinatesSample" <<User/Client code>> {
## Updates shared client specific memory, signal Event.set()
+ {static} sharedDataProcessing(currentPosition, targetPosition, direction, sharedMemory)
}
class EventDispatcher2 as "EventDispatcher" <<Singleton>> {
- _mpEventSharedMemory // Updates Event Info, \n                                           // notify EventDispatcher \n                                          // in MainProcess
--
publishMainLoop()

}
class BasicSynchronizedNavigation <<Singleton>> {
go() // Aggregates drivers, send coordinated GPIO pulses.
}

abstract class MotorDriver2 as "MotorDriver" {
--
## stepping method arguments, [optional]
## (steps, [fn, eventNamePrefix, eventInAdvanceSteps])
signedSteps()
stepClockWise()
stepCounterClockWise()
- _operateStepper(PolarCoordinatesSample.sharedDataProcessing)
}
class MotorDriver_Elevation <<Instance>> {
jobQueue // Shared multiprocess blocking queue
- _operateStepper(PolarCoordinatesSample.sharedDataProcessing)
}
class MotorDriver_Azimuth <<Instance>> {
jobQueue // Shared multiprocess blocking queue
- _operateStepper(PolarCoordinatesSample.sharedDataProcessing)
}

}
PolarCoordinatesSample .up.> MultiProcessingControllerFactory : 1) setUpProcess()\nwithDriver(<azimuth>)\nwithDriver(<elevation>)\nspawn()
PolarCoordinatesSample ..> EventDispatcher : register(["steppingCompleteAdvance",\n "steppingCompleteFinalStep",...], \n self.fireReadyEventHandler)
MultiProcessingControllerFactory .right..> Process2

PolarCoordinatesSample ..> MotorDriver_Elevation_proxy : work()
PolarCoordinatesSample ..> MotorDriver_Azimuth_proxy : work()
MotorDriver_Azimuth_proxy .up.> MotorDriver1

MotorDriver_Elevation .down.> "Process2.MotorDriver"
MotorDriver_Azimuth ..> MotorDriver2
MotorDriver_Elevation ..> BasicSynchronizedNavigation: go(steps)
MotorDriver_Azimuth ..> BasicSynchronizedNavigation: go(steps)
MotorDriver_Azimuth .up.> "EventDispatcher2" : publishMainLoop([prefix]+"steppingCompleteAdvance")\npublishMainLoop([prefix]+"steppingCompleteFinalStep")
MotorDriver_Azimuth .up.> PolarCoordinatesSample2 : sharedDataProcessing()

EventDispatcher ..> EventDispatcher : publishMainLoop() \n// Proxying child process events \n Notified with sharedMemory
EventDispatcher ..> PolarCoordinatesSample : notify("steppingCompleteAdvance")

MpQueue -up-|>  multiprocess.Queue
EventDispatcher2 .up.> "set()   \n" Event
BlockingQueueWorkerEd ..up..* EventDispatcher : <
BlockingQueueWorkerEd .left..> EventDispatcher : publishMainLoop("steppingCompleteAdvance" \n// proxyEventInChildPricess)
BlockingQueueWorkerEd .down..> "clear()   \n" Event

note as N1
Proxy puts jobs in Queue but
Process-2 MotorDriver consumes stepping jobs
end note

note as N2
EventDispatcher always notifies locally. Child Process'
ED also updates shared memory Values with event details
 and signals with `process.Event.set()`.
MainProcess waits on process.Event to proxy events upstream
end note

N1 .up.> MotorDriver_Azimuth_proxy
N1 .down..> MotorDriver_Azimuth

N2 .up..> EventDispatcher
N2 .down.> EventDispatcher2


@enduml